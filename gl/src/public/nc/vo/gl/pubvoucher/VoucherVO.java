package nc.vo.gl.pubvoucher;

/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
 \***************************************************************/

import java.util.ArrayList;
import java.util.Vector;

import nc.bs.logging.Logger;
import nc.itf.gl.voucher.IBusiOperation;
import nc.pubitf.fip.external.IDesBillVOInterface;
import nc.vo.fip.service.FipRelationInfoVO;
import nc.vo.gl.aggvoucher.MDDetail;
import nc.vo.gl.vatdetail.VatDetailVO;
import nc.vo.glcom.ass.AssVO;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.NullFieldException;
import nc.vo.pub.ValidationException;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDateTime;
import nc.vo.pub.lang.UFDouble;

import org.apache.commons.lang.StringUtils;

/**
 * 凭证VO，用于承载凭证数据 创建日期：(2003-2-26)
 * 
 * @author Administrator
 * 
 */
public class VoucherVO extends CircularlyAccessibleValueObject implements nc.vo.glpub.IVoAccess, IBusiOperation, IDesBillVOInterface {
	// hurh
	public final static String PK_ACCOUNTINGBOOK = "gl_voucher.pk_accountingbook";
	public final static String PK_VOUCHERTYPE = "gl_voucher.pk_vouchertype";
	public final static String PREPAREDDATE = "gl_voucher.prepareddate";
	public final static String PK_PREPARED = "gl_voucher.pk_prepared";
	public final static String PK_CASHER = "gl_voucher.pk_casher";
	public final static String PK_CHEEKED = "gl_voucher.pk_checked";
	public final static String PK_MANAGER = "gl_voucher.pk_manager";
	public final static String EXPLANATION = "gl_voucher.explanation";
	public final static String YEAR = "gl_voucher.year";
	public final static String PERIOD = "gl_voucher.period";
	public final static String PK_VOUCHER = "pk_voucher";
	public final static String NUM = "gl_voucher.num";

	/*** 是否模板协同标记 **/
	// 解决模板协同和公有协同凭证的标记问题
	private UFBoolean ismodelrecflag = nc.vo.pub.lang.UFBoolean.FALSE;

	public UFBoolean getIsmodelrecflag() {
		if (ismodelrecflag == null) {
			return nc.vo.pub.lang.UFBoolean.FALSE;
		}
		return ismodelrecflag;
	}

	public void setIsmodelrecflag(UFBoolean ismodelrecflag) {
		this.ismodelrecflag = ismodelrecflag;
	}

	static final long serialVersionUID = -734532366925764037L;

	/**
	 * 凭证主键
	 */
	public String m_pk_voucher; // 凭证主键

	/** 凭证类别主键 */
	public String m_pk_vouchertype; // 凭证类别主键

	/** 会计年度 */
	public String m_year; // 会计年度

	/**
	 * 会计期间
	 * <p>
	 * 取值范围为系统定义的期间,不包含调整期间信息
	 * </p>
	 */
	public String m_period; // 会计期间

	/** 凭证号 */
	public Integer m_num = Integer.MIN_VALUE; // 凭证号

	/** 制单日期 */
	public UFDate m_prepareddate; // 制单日期

	/** 记账日期 */
	public UFDate m_tallydate; // 记账日期

	/** 附单据数 */
	public Integer m_attachment; // 附单据数

	/** 制单人主键 */
	public String m_pk_prepared; // 制单人主键

	/** 审核人主键 */
	public String m_pk_checked; // 审核人主键

	/** 出纳主键 */
	public String m_pk_casher; // 出纳主键

	/** 记账人主键 */
	public String m_pk_manager; // 记账人主键

	/** 签字标志 */
	public UFBoolean m_signflag; // 签字标志

	/**
	 * 凭证修改标志，示例"YYY", 第一位 表示凭证日期是否可改，可以修改传"Y" 否则传"N" 第二位 表示凭证类别是否可改，可以修改传"Y" 否则传"N" 第三位 表示附单据数是否可改，可以修改传"Y" 否则传"N"
	 */
	public String m_modifyflag; // 凭证修改标志

	/**
	 * 分录增删标志
	 * <p>
	 * 取值范围：Y-可以删除,N-不能删除
	 * </p>
	 */
	public UFBoolean m_detailmodflag; // 分录增删标志

	/**
	 * 作废标志
	 * <p>
	 * 取值范围：Y-作废凭证,N-非作废凭证
	 * </p>
	 */
	public UFBoolean m_discardflag; // 作废标志

	/**
	 * 制单系统主键
	 * <p>
	 * 注意：产业链接口不要使用系统保留的主键。 <>
	 */
	public String m_pk_system; // 制单系统主键

	/**
	 * 增加接口类
	 * <p>
	 * 凭证增加时会调用注册的接口类，注册类需要包含完整的包名
	 * </p>
	 */
	public String m_addclass; // 增加接口类

	/**
	 * 修改接口类
	 * <p>
	 * 凭证修改时会调用注册的接口类，注册类需要包含完整的包名
	 * </p>
	 * 
	 */
	public String m_modifyclass; // 修改接口类

	/**
	 * 删除接口类
	 * <p>
	 * 凭证删除时会调用注册的接口类，注册类需要包含完整的包名
	 * </p>
	 */
	public String m_deleteclass; // 删除接口类

	/** 凭证类型 */
	public Integer m_voucherkind; // 凭证类型

	/** 组织本币借方合计 */
	public UFDouble m_totaldebit; // 组织本币借方合计

	/** 组织本币贷方合计 */
	public UFDouble m_totalcredit; // 组织本币贷方合计
	/**
	 * 集团本币借方
	 */
	public UFDouble m_totaldebitgroup;
	/**
	 * 集团本币贷方
	 */
	public UFDouble m_totalcreditgroup;
	/**
	 * 全局本币借方
	 */
	public UFDouble m_totaldebitglobal;
	/**
	 * 全局本币贷方
	 */
	public UFDouble m_totalcreditglobal;

	/** 凭证摘要 */
	public String m_explanation; // 凭证摘要
	
	public UFDateTime m_ts;

	/**
	 * 对账标志
	 * <p>
	 * 保留字段
	 * </p>
	 */
	public Integer m_contrastflag; // 对账标志

	/** 标错信息 */
	public String m_errmessage; // 标错信息

	/** 暂存标志 */
	public UFBoolean m_tempsaveflag; // 暂存标志

	/**
	 * 调整期间
	 * <p>
	 * 取值范围为系统定义的期间或者调整期间
	 * </p>
	 */
	// public String m_adjustperiod; // 调整期间

	public String m_isVerify; // 是否核销

	public String m_adjustperiod; // 预留字段1，扩展用

	/** 预留字段1，扩展用 */
	public String m_free1; // 预留字段1，扩展用

	/** 预留字段2，扩展用 */
	public String m_free2; // 预留字段2，扩展用

	/** 预留字段3，扩展 */
	public String m_free3; // 预留字段3，扩展

	/** 预留字段4，扩展用 */
	public String m_free4; // 预留字段4，扩展用

	/** 预留字段5，扩展用 */
	public String m_free5; // 预留字段5，扩展用

	/** 预留字段6，扩展用 */
	public String m_free6; // 预留字段6，扩展用

	/** 预留字段7，扩展用 */
	public String m_free7; // 预留字段7，扩展用

	/** 预留字段8，扩展用 */
	public String m_free8; // 预留字段8，扩展用

	/** 预留字段9，扩展用 */
	public String m_free9; // 预留字段9，扩展用

	/** 预留字段10，扩展用 */
	public String m_free10; // 预留字段10，扩展用

	/** 签字日期 */
	public UFDate m_signdate; // 签字日期

	/** 审核日期 */
	public UFDate m_checkeddate; // 审核日期

	/** 账簿主键 */
	public String m_pk_setofbook;

	/** 原始组织主键，新增时的组织 */
	public String m_pk_org;

	/** 主体账簿 */
	public String m_pk_accountingbook;

	/** 源凭证pk */
	public String m_pk_sourcepk;

	/**
	 * 折算标志
	 * <p>
	 * 取值范围：Y-已经折算,N-未折算
	 * </p>
	 */
	public UFBoolean m_convertflag;

	/** 凭证表头自定义项1 */
	public String m_freevalue1; // 凭证表头自定义项1

	/** 凭证表头自定义项2 */
	public String m_freevalue2; // 凭证表头自定义项2

	/** 凭证表头自定义项3 */
	public String m_freevalue3; // 凭证表头自定义项3

	/** 凭证表头自定义项4 */
	public String m_freevalue4; // 凭证表头自定义项4

	/** 凭证表头自定义项5 */
	public String m_freevalue5; // 凭证表头自定义项5

	// 辅助信息，数据库中没有，用于界面显示。
	/** 凭证类别名称 */
	public String m_vouchertypename; // 凭证类别名称

	/** 公司名称 */
	public String m_corpname; // 公司名称

	/** 制单人名 */
	public String m_preparedname; // 制单人名

	/** 审核人名 */
	public String m_checkedname; // 审核人名

	/** 出纳人名 */
	public String m_cashername; // 出纳人名

	/** 记账人名 */
	public String m_managername; // 记账人名

	/** 制单系统名称 系统名称和表dap_dapsystem关联，即制单系统必须是表dap_dapsystem里的数据，否则不能正常显示 */
	public String m_systemname; // 制单系统名称

	/**
	 * 分录
	 * <p>
	 * 凭证分录数据
	 * </p>
	 */
	// 表体数据
	public Vector m_detail; // 分录

	/** 勾对标志，辅助信息，表示凭证是否被现金银行或集团对账等其他模块勾对过。 */
	public Boolean m_ismatched; // 勾对标志，辅助信息，表示凭证是否被现金银行或集团对账等其他模块勾对过。

	/**
	 * 辅助信息，用于外系统接口。
	 * <p>
	 * 注意：外系统使用数据的载体，不会保存在总账系统中
	 * </p>
	 */
	public Object m_userdata; // 辅助信息，用于外系统接口。

	/**
	 * 表外科目标志
	 * <p>
	 * 取值范围：Y-表外科目，N-非表外科目
	 * </p>
	 */
	public UFBoolean m_isoutsubj;

	/** 冲销凭证PK */
	public String offervoucher;
	
	//冲销类凭证标识
	private UFBoolean isOffer = UFBoolean.FALSE;

	/** 差异凭证标记 */
	public UFBoolean isdifflag = nc.vo.pub.lang.UFBoolean.FALSE;

	/** 错误凭证的历史信息 */
	public String errmessageh;

	/** 现金流量信息是否手工修改过 */
	private boolean hasCashflowModified = false;

	// 影响凭证号的因素是否改变过
	private boolean isNoFactorChanged = false;

	public Object noFeature;

	/** 创建者，重要属性，特殊数据权限使用，如果随意改动可能出现特殊数据权限校验错误 */
	private String creator; // 创建人

	private UFDateTime creationtime; // 创建时间
	private String modifier; // 修改人
	private UFDateTime modifiedtime; // 修改时间
	private String pk_group; // 所属集团
	/** 组织主键，与制单日期对应版本的组织主键 */
	private String pk_org_v;

	private UFBoolean preaccountflag = null;

	/**
	 * 新增制单 人
	 */
	private String billmaker;
	/**
	 * 新增审核 人
	 */
	private String approver;

	private DetailVO[] details;

	/**
	 * 会计平台 控制规则
	 */
	private String editflag = null;
	/**
	 * 会计平台fipInfo
	 */
	private Object fipInfo = null;

	/**
	 * 是否参照核销 V636 add by pangjsh
	 */
	private boolean hasRefVerify = false;
	
	/**
	 * 使用主键字段进行初始化的构造子。
	 * 
	 * 创建日期：(2003-2-26)
	 */
	public VoucherVO() {

	}

	/**
	 * 使用主键进行初始化的构造子。
	 * 
	 * 创建日期：(2003-2-26)
	 * 
	 * @param ??fieldNameForMethod?? 主键值
	 */
	public VoucherVO(String newPk_voucher) {

		// 为主键字段赋值:
		m_pk_voucher = newPk_voucher;
	}

	/**
	 * 创建日期：(2001-10-18 15:51:56) 增加分录
	 * 
	 * @param detail
	 *            nc.vo.gl.pubvoucher.DetailVO
	 */
	public void addDetail(DetailVO detail) {
		getDetail_Create().addElement(detail.clone());
	}

	/**
	 * 清空分录
	 */
	public void clearEmptyDetail() {
		int numDetails = getNumDetails();
		for (int i = 0; i < numDetails; i++) {
			DetailVO detail = getDetail(i);
			if ((detail.getPk_accasoa() == null || detail.getPk_accasoa().trim().equals("")) && detail.getAssid() == null && (detail.getLocalcreditamount() == null || detail.getLocalcreditamount().doubleValue() == 0) && (detail.getLocaldebitamount() == null || detail.getLocaldebitamount().doubleValue() == 0) && (detail.getDebitamount() == null || detail.getDebitamount().doubleValue() == 0)
					&& (detail.getCreditamount() == null || detail.getCreditamount().doubleValue() == 0) && (detail.getDebitquantity() == null || detail.getDebitquantity().doubleValue() == 0) && (detail.getCreditquantity() == null || detail.getCreditquantity().doubleValue() == 0)
			/*
			 * && (detail.getFraccreditamount() == null || detail .getFraccreditamount().doubleValue() == 0) && (detail.getFracdebitamount() == null || detail .getFracdebitamount().doubleValue() == 0)
			 */) {
				deleteDetail(i);
				i--;
				numDetails--;
			}
		}
	}

	/**
	 * 清空分录
	 */
	public void clearDetail() {
		int numDetails = getNumDetails();
		boolean isbalance = !(getTotaldebit().sub(getTotalcredit()).abs().compareTo(new UFDouble(0.0000009)) > 0);
		for (int i = 0; i < numDetails; i++) {
			DetailVO detail = getDetail(i);
			if ((detail.getPk_accasoa() == null || detail.getPk_accasoa().trim().equals("")) && detail.getAssid() == null && (detail.getLocalcreditamount() == null || detail.getLocalcreditamount().doubleValue() == 0) && (detail.getLocaldebitamount() == null || detail.getLocaldebitamount().doubleValue() == 0) && (detail.getDebitamount() == null || detail.getDebitamount().doubleValue() == 0)
					&& (detail.getCreditamount() == null || detail.getCreditamount().doubleValue() == 0) && (detail.getDebitquantity() == null || detail.getDebitquantity().doubleValue() == 0) && (detail.getCreditquantity() == null || detail.getCreditquantity().doubleValue() == 0) && (detail.getGroupdebitamount() == null || detail.getGroupdebitamount().doubleValue() == 0)
					&& (detail.getGroupcreditamount() == null || detail.getGroupcreditamount().doubleValue() == 0) && (detail.getGlobaldebitamount() == null || detail.getGlobaldebitamount().doubleValue() == 0) && (detail.getGlobalcreditamount() == null || detail.getGlobalcreditamount().doubleValue() == 0)
			/*
			 * && (detail.getFraccreditamount() == null || detail .getFraccreditamount().doubleValue() == 0) && (detail.getFracdebitamount() == null || detail .getFracdebitamount().doubleValue() == 0)
			 */) {
				deleteDetail(i);
				i--;
				numDetails--;
			}
			if (isbalance && detail.getPk_accasoa() != null && detail.getVatdetail() == null && (detail.getLocalcreditamount() == null || detail.getLocalcreditamount().doubleValue() == 0) && (detail.getLocaldebitamount() == null || detail.getLocaldebitamount().doubleValue() == 0) && (detail.getDebitamount() == null || detail.getDebitamount().doubleValue() == 0)
					&& (detail.getCreditamount() == null || detail.getCreditamount().doubleValue() == 0) && (detail.getDebitquantity() == null || detail.getDebitquantity().doubleValue() == 0) && (detail.getCreditquantity() == null || detail.getCreditquantity().doubleValue() == 0) && (detail.getFraccreditamount() == null || detail.getFraccreditamount().doubleValue() == 0)
					&& (detail.getFracdebitamount() == null || detail.getFracdebitamount().doubleValue() == 0) && (detail.getGroupdebitamount() == null || detail.getGroupdebitamount().doubleValue() == 0) && (detail.getGroupcreditamount() == null || detail.getGroupcreditamount().doubleValue() == 0) && (detail.getGlobaldebitamount() == null || detail.getGlobaldebitamount().doubleValue() == 0)
					&& (detail.getGlobalcreditamount() == null || detail.getGlobalcreditamount().doubleValue() == 0)) {
				deleteDetail(i);
				i--;
				numDetails--;
			}
		}
	}

	/**
	 * 根类Object的方法,克隆这个VO对象。
	 * 
	 * 创建日期：(2003-2-26)
	 */
	public Object clone() {

		// 复制基类内容并创建新的VO对象：
		Object o = null;
		try {
			o = super.clone();
		} catch (Exception e) {
		}
		VoucherVO voucher = (VoucherVO) o;
		if (voucher == null)
			voucher = new VoucherVO();

		// 你在下面复制本VO对象的所有属性：
		voucher.setTs(this.getTs());
		voucher.setPk_voucher(this.getPk_voucher()); // 凭证主键
		voucher.setPk_vouchertype(this.getPk_vouchertype()); // 凭证类别主键
		voucher.setYear(this.getYear()); // 会计年度
		voucher.setPeriod(this.getPeriod()); // 会计期间
		voucher.setNo(this.getNo()); // 凭证号
		voucher.setPrepareddate(this.getPrepareddate()); // 制单日期
		voucher.setTallydate(this.getTallydate()); // 记账日期
		voucher.setAttachment(this.getAttachment()); // 附单据数
		voucher.setPk_prepared(this.getPk_prepared()); // 制单人主键
		voucher.setPk_checked(this.getPk_checked()); // 审核人主键
		voucher.setPk_casher(this.getPk_casher()); // 出纳主键
		voucher.setPk_manager(this.getPk_manager()); // 记账人主键
		voucher.setSignflag(this.getSignflag()); // 签字标志
		voucher.setModifyflag(this.getModifyflag()); // 凭证修改标志
		voucher.setDetailmodflag(this.getDetailmodflag()); // 分录增删标志
		voucher.setDiscardflag(this.getDiscardflag()); // 作废标志
		voucher.setPk_system(this.getPk_system()); // 制单系统主键
		voucher.setAddclass(this.getAddclass()); // 增加接口类
		voucher.setModifyclass(this.getModifyclass()); // 修改接口类
		voucher.setDeleteclass(this.getDeleteclass()); // 删除接口类
		voucher.setVoucherkind(this.getVoucherkind()); // 凭证类型
		voucher.setTotaldebit(this.getTotaldebit()); // 借方合计
		voucher.setTotalcredit(this.getTotalcredit()); // 贷方合计
		voucher.setTotaldebitgroup(this.getTotaldebitgroup());
		voucher.setTotalcreditgroup(this.getTotalcreditgroup());
		voucher.setTotaldebitglobal(this.getTotaldebitglobal());
		voucher.setTotalcreditglobal(this.getTotalcreditglobal());
		voucher.setExplanation(this.getExplanation()); // 凭证摘要
		voucher.setContrastflag(this.getContrastflag()); // 对账标志
		voucher.setErrmessage(this.getErrmessage()); // 标错信息
		voucher.setM_adjustperiod(this.getM_adjustperiod()); // 预留字段1，扩展用
		voucher.setFree1(this.getFree1()); // 预留字段1，扩展用
		voucher.setFree2(this.getFree2()); // 预留字段2，扩展用
		voucher.setFree3(this.getFree3()); // 预留字段3，扩展用
		voucher.setFree4(this.getFree4()); // 预留字段4，扩展用
		voucher.setFree5(this.getFree5()); // 预留字段5，扩展用
		voucher.setFree6(this.getFree6()); // 预留字段6，扩展用
		voucher.setFree7(this.getFree7()); // 预留字段7，扩展用
		voucher.setFree8(this.getFree8()); // 预留字段8，扩展用
		voucher.setFree9(this.getFree9()); // 预留字段9，扩展用
		voucher.setFree10(this.getFree10()); // 预留字段10，扩展用
		voucher.setPk_setofbook(this.getPk_setofbook()); //
		voucher.setPk_org(this.getPk_org()); //
		// voucher.setPk_accountingbook(this.m_pk_glorgbook); //
		voucher.setPk_sourcepk(this.getPk_sourcepk()); //
		voucher.setConvertflag(this.getConvertflag()); //
		voucher.setOffervoucher(this.getOffervoucher()); //
		voucher.setIsOffer(this.getIsOffer());
		voucher.setIsdifflag(this.getIsdifflag()); //
		voucher.setErrmessageh(this.getErrmessageh()); //
		voucher.setPk_group(this.getPk_group());
		voucher.setM_adjustperiod(this.getM_adjustperiod());
		voucher.setM_isVerify(this.getM_isVerify());
		voucher.setCreator(this.getCreator());
		voucher.setCreationtime(this.getCreationtime());
		voucher.setModifier(this.getModifier());
		voucher.setModifiedtime(this.getModifiedtime());
		voucher.setFreevalue1(this.getFreevalue1()); // 凭证表头自定义项1
		voucher.setFreevalue2(this.getFreevalue2()); // 凭证表头自定义项2
		voucher.setFreevalue3(this.getFreevalue3()); // 凭证表头自定义项3
		voucher.setFreevalue4(this.getFreevalue4()); // 凭证表头自定义项4
		voucher.setFreevalue5(this.getFreevalue5()); // 凭证表头自定义项5
		/*
		 * //辅助信息，数据库中没有，用于界面显示。 voucher.setvouchertypename(this.get); //凭证类别名称 voucher.setcorpname(this.get); //公司名称 voucher.setpreparedname(this.get); //制单人名 voucher.setcheckedname(this.get); //审核人名 voucher.setcashername(this.get); //出纳人名 voucher.setmanagername(this.get); //记账人名 voucher.setsystemname(this.get); //制单系统名称
		 */

		// 新增的制单人
		voucher.setBillmaker(this.getBillmaker());
		// 新增的审核人
		voucher.setApprover(this.getApprover());
		voucher.setTempsaveflag(this.getTempsaveflag());
		voucher.setPk_org_v(this.getPk_org_v());
		// 表体数据
		Vector t_details = new Vector();
		for (int i = 0; i < this.getNumDetails(); i++) {
			DetailVO t_detail = (DetailVO) this.getDetail(i).clone();
			t_details.addElement(t_detail);
		}
		voucher.setDetail(t_details);

		voucher.setIsmatched(this.getIsmatched()); // 勾对标志，辅助信息，表示凭证是否被现金银行或集团对账等其他模块勾对过。

		voucher.setUserData(this.getUserData()); // 辅助信息，用于外系统接口。
		voucher.setFipInfo(this.getFipInfo());
		return voucher;
	}

	/**
	 * 删除分录
	 * 
	 * @param 分录序号
	 */
	public void deleteDetail(int iIndex) {
		DetailVO[] details = getDetails();
		java.util.Vector vecdetails = new java.util.Vector();
		if (iIndex < 0)
			return;
		DetailVO detail = getDetail(iIndex);
		for (int i = 0; i < iIndex; i++) {
			details[i].setDetailindex(Integer.valueOf(i + 1));
			vecdetails.addElement(details[i]);
		}
		for (int i = iIndex + 1; i < details.length; i++) {
			if (details[i].getDetailindex() != null)
				details[i].setDetailindex(Integer.valueOf(i));
			vecdetails.addElement(details[i]);
		}
		setDetail(vecdetails);
		if (detail.getLocalcreditamount() != null && detail.getLocaldebitamount() != null) {
			setTotalcredit(getTotalcredit().sub(detail.getLocalcreditamount()));
			setTotaldebit(getTotaldebit().sub(detail.getLocaldebitamount()));
		}

		if (getTotaldebitgroup() == null) {
			setTotaldebitgroup(UFDouble.ZERO_DBL);
		}
		if (getTotalcreditgroup() == null) {
			setTotalcreditgroup(UFDouble.ZERO_DBL);
		}
		if (getTotaldebitglobal() == null) {
			setTotaldebitglobal(UFDouble.ZERO_DBL);
		}
		if (getTotalcreditglobal() == null) {
			setTotalcreditglobal(UFDouble.ZERO_DBL);
		}

		setTotaldebitgroup(getTotaldebitgroup().sub(detail.getGroupdebitamount()));
		setTotalcreditgroup(getTotalcreditgroup().sub(detail.getGroupcreditamount()));
		setTotaldebitglobal(getTotaldebitglobal().sub(detail.getGlobaldebitamount()));
		setTotalcreditglobal(getTotalcreditglobal().sub(detail.getGlobalcreditamount()));
	}

	/**
	 * 属性m_addclass的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getAddclass() {
		return m_addclass;
	}

	/**
	 * 属性m_attachment的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return Integer
	 */
	public Integer getAttachment() {
		return m_attachment;
	}

	/**
	 * <p>
	 * 需要在一个循环中访问的属性的名称数组。
	 * <p>
	 * 创建日期：(??Date??)
	 * 
	 * @return java.lang.String[]
	 */
	public java.lang.String[] getAttributeNames() {

		return new String[] {
				"addclass", "attachment", "contrastflag", "deleteclass", "detailmodflag", "discardflag", "errmessage", "explanation", "free1", "free10", "free2", "free3", "free4", "free5", "free6", "free7", "free8", "free9", "modifyclass", "modifyflag", "no", "period", "pk_casher", "pk_checked", "pk_corp", "pk_manager", "pk_prepared", "pk_sob", "pk_system", "pk_vouchertype", "prepareddate",
				"signflag", "tallydate", "totalcredit", "totaldebit", "voucherkind", "year", "signdate", "checkeddate", "billmaker", "approver", "creator", "tempsaveflag"
		};
	}

	/**
	 * <p>
	 * 根据一个属性名称字符串该属性的值。
	 * <p>
	 * 创建日期：(2003-9-28)
	 * 
	 * @param key
	 *            java.lang.String
	 */
	public Object getAttributeValue(String attributeName) {

		if (attributeName.equals("pk_voucher")) {
			return m_pk_voucher;
		} else if (attributeName.equals("addclass")) {
			return m_addclass;
		} else if (attributeName.equals("attachment")) {
			return m_attachment;
		} else if (attributeName.equals("contrastflag")) {
			return m_contrastflag;
		} else if (attributeName.equals("deleteclass")) {
			return m_deleteclass;
		} else if (attributeName.equals("detailmodflag")) {
			return m_detailmodflag;
		} else if (attributeName.equals("discardflag")) {
			return m_discardflag;
		} else if (attributeName.equals("errmessage")) {
			return m_errmessage;
		} else if (attributeName.equals("explanation")) {
			return m_explanation;
		} else if (attributeName.equals("free1")) {
			return m_free1;
		} else if (attributeName.equals("adjustperiod")) {
			return m_adjustperiod;
		} else if (attributeName.equals("free10")) {
			return m_free10;
		} else if (attributeName.equals("free2")) {
			return m_free2;
		} else if (attributeName.equals("free3")) {
			return m_free3;
		} else if (attributeName.equals("free4")) {
			return m_free4;
		} else if (attributeName.equals("free5")) {
			return m_free5;
		} else if (attributeName.equals("free6")) {
			return m_free6;
		} else if (attributeName.equals("free7")) {
			return m_free7;
		} else if (attributeName.equals("free8")) {
			return m_free8;
		} else if (attributeName.equals("free9")) {
			return m_free9;
		} else if (attributeName.equals("modifyclass")) {
			return m_modifyclass;
		} else if (attributeName.equals("modifyflag")) {
			return m_modifyflag;
		} else if (attributeName.equals("num")) {
			return m_num;
		} else if (attributeName.equals("period")) {
			return m_period;
		} else if (attributeName.equals("pk_casher")) {
			return m_pk_casher;
		} else if (attributeName.equals("pk_checked")) {
			return m_pk_checked;
		} else if (attributeName.equals("pk_manager")) {
			return m_pk_manager;
		} else if (attributeName.equals("pk_prepared")) {
			return m_pk_prepared;
		} else if (attributeName.equals("pk_system")) {
			return m_pk_system;
		} else if (attributeName.equals("pk_vouchertype")) {
			return m_pk_vouchertype;
		} else if (attributeName.equals("prepareddate")) {
			return m_prepareddate;
		} else if (attributeName.equals("signflag")) {
			return m_signflag;
		} else if (attributeName.equals("tallydate")) {
			return m_tallydate;
		} else if (attributeName.equals("totalcredit")) {
			return m_totalcredit;
		} else if (attributeName.equals("totaldebit")) {
			return m_totaldebit;
		} else if (attributeName.equals("voucherkind")) {
			return m_voucherkind;
		} else if (attributeName.equals("year")) {
			return m_year;
		} else if (attributeName.equals("signdate")) {
			return m_signdate;
		} else if (attributeName.equals("checkeddate")) {
			return m_checkeddate;
		} else if (attributeName.equalsIgnoreCase("billmaker")) {
			return this.billmaker;
		} else if (attributeName.equalsIgnoreCase("approver")) {
			return this.approver;
		} else if (attributeName.equals("creator")) {
			return this.creator;
		} else if (attributeName.equals("tempsaveflag")) {
			return this.m_tempsaveflag;
		}
		return null;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-5 11:50:37)
	 * 
	 * @deprecated 不建议使用，因为该值并不一定准确
	 * @return java.lang.String
	 */
	public String getCashername() {
		return m_cashername;
	}

	/**
	 * 属性m_checkeddate的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return UFDate
	 */
	public UFDate getCheckeddate() {
		return m_checkeddate;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-5 11:50:37)
	 * 
	 * @deprecated 不建议使用，因为该值并不一定准确
	 * @return java.lang.String
	 */
	public String getCheckedname() {
		return m_checkedname;
	}

	/**
	 * 属性m_contrastflag的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return Integer
	 */
	public Integer getContrastflag() {
		return m_contrastflag;
	}

	/**
	 * 属性m_convertflag的Getter方法。
	 * 
	 * 创建日期：(2005-1-14)
	 * 
	 * @return UFBoolean
	 */
	public UFBoolean getConvertflag() {
		return m_convertflag;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-5 11:50:37)
	 * 
	 * @deprecated 不建议使用，因为该值并不一定准确
	 * @return java.lang.String
	 */
	public String getCorpname() {
		return m_corpname;
	}

	/**
	 * 属性m_deleteclass的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getDeleteclass() {
		return m_deleteclass;
	}

	/**
	 * 属性m_detail的Getter方法。
	 * 
	 * 创建日期：(2001-8-20)
	 * 
	 * @return Vector
	 */
	public Vector getDetail() {
		return m_detail;
	}

	/**
	 * 属性m_detail的Getter方法。
	 * 
	 * 创建日期：(2001-8-20)
	 * 
	 * @return String
	 * 
	 *         注意：iIndex是detail在voucher里的序列号，与分录号不同，是从"0"开始的。
	 */
	public DetailVO getDetail(int iIndex) {
		if (iIndex >= getNumDetails())
			return null;
		return (DetailVO) (getDetail_Create().elementAt(iIndex));
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-5 11:59:29)
	 * 
	 * @return java.util.Vector
	 */
	protected Vector getDetail_Create() {
		if (m_detail == null)
			m_detail = new Vector();
		return m_detail;
	}

	/**
	 * 属性m_detailmodflag的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return UFBoolean
	 */
	public UFBoolean getDetailmodflag() {
		return m_detailmodflag;
	}

	/**
	 * 属性m_detail的Getter方法。
	 * 
	 * 创建日期：(2001-8-20)
	 * 
	 * @return String
	 */
	public DetailVO[] getDetails() {
		DetailVO[] t_detail = new DetailVO[getDetail_Create().size()];
		getDetail_Create().copyInto(t_detail);
		return t_detail;
	}

	/**
	 * 属性m_discardflag的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return UFBoolean
	 */
	public UFBoolean getDiscardflag() {
		return m_discardflag;
	}

	/**
	 * 返回数值对象的显示名称。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return java.lang.String 返回数值对象的显示名称。
	 */
	public String getEntityName() {

		return "Voucher";
	}

	/**
	 * 属性m_errmessage的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getErrmessage() {
		return m_errmessage;
	}

	/**
	 * 属性m_explanation的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getExplanation() {
		return m_explanation;
	}

	/**
	 * 属性m_free1的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */

	public String getFree1() {
		return m_free1;
	}

	public String getM_adjustperiod() {
		return m_adjustperiod;
	}

	/**
	 * 属性m_free10的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getFree10() {
		return m_free10;
	}

	/**
	 * 属性m_free2的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getFree2() {
		return m_free2;
	}

	/**
	 * 属性m_free3的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getFree3() {
		return m_free3;
	}

	/**
	 * 属性m_free4的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getFree4() {
		return m_free4;
	}

	/**
	 * 属性m_free5的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getFree5() {
		return m_free5;
	}

	/**
	 * 属性m_free6的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getFree6() {
		return m_free6;
	}

	/**
	 * 属性m_free7的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getFree7() {
		return m_free7;
	}

	/**
	 * 属性m_free8的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getFree8() {
		return m_free8;
	}

	/**
	 * 属性m_free9的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getFree9() {
		return m_free9;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2002-9-18 11:52:14)
	 * 
	 * @return java.lang.String
	 */
	public String getFreevalue1() {
		return m_freevalue1;
	}

	public String getFreevalue2() {
		return m_freevalue2;
	}

	public String getFreevalue3() {
		return m_freevalue3;
	}

	public String getFreevalue4() {
		return m_freevalue4;
	}

	public String getFreevalue5() {
		return m_freevalue5;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2002-4-10 18:41:37)
	 * 
	 * @return java.lang.Boolean
	 */
	public Boolean getIsmatched() {
		return m_ismatched;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-9-22 17:46:03)
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIsOutSubj() {
		return m_isoutsubj;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-5 11:50:37)
	 * 
	 * @deprecated 不建议使用，因为该值并不一定准确
	 * @return java.lang.String
	 */
	public String getManagername() {
		return m_managername;
	}

	/**
	 * 属性m_modifyclass的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getModifyclass() {
		return m_modifyclass;
	}

	/**
	 * 属性m_modifyflag的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getModifyflag() {
		return m_modifyflag;
	}

	/**
	 * 属性m_no的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return Integer
	 */
	public Integer getNo() {
		if (m_num != null && Integer.MIN_VALUE == m_num) {
			return 0;
		}
		return  m_num;
	}

	/**
	 * 属性m_detail的Getter方法。
	 * 
	 * 创建日期：(2001-8-20)
	 * 
	 * @return int
	 */
	public int getNumDetails() {
		return getDetail_Create().size();
	}

	/**
	 * 属性m_period的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getPeriod() {
		return m_period;
	}

	/**
	 * 属性m_pk_casher的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getPk_casher() {
		return m_pk_casher;
	}

	/**
	 * 属性m_pk_checked的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getPk_checked() {
		return m_pk_checked;
	}

	/**
	 * 属性m_pk_glbook的Getter方法。
	 * 
	 * 创建日期：(2005-1-14)
	 * 
	 * @return String
	 */
	public String getPk_setofbook() {
		return m_pk_setofbook;
	}

	/**
	 * 属性m_pk_glorg的Getter方法。
	 * 
	 * 创建日期：(2005-1-14)
	 * 
	 * @return String
	 */
	public String getPk_org() {
		return m_pk_org;
	}

	/**
	 * 属性m_pk_glorgbook的Getter方法。
	 * 
	 * 创建日期：(2005-1-14)
	 * 
	 * @return String
	 */
	public String getPk_accountingbook() {
		return m_pk_accountingbook;
	}

	/**
	 * 属性m_pk_manager的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getPk_manager() {
		return m_pk_manager;
	}

	/**
	 * 属性m_pk_prepared的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getPk_prepared() {
		return m_pk_prepared;
	}

	/**
	 * 属性m_pk_sourcepk的Getter方法。
	 * 
	 * 创建日期：(2005-1-14)
	 * 
	 * @return String
	 */
	public String getPk_sourcepk() {
		return m_pk_sourcepk;
	}

	/**
	 * 属性m_pk_system的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getPk_system() {
		return m_pk_system;
	}

	/**
	 * 属性m_pk_voucher的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getPk_voucher() {
		return m_pk_voucher;
	}

	/**
	 * 属性m_pk_vouchertype的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getPk_vouchertype() {
		return m_pk_vouchertype;
	}

	/**
	 * 属性m_prepareddate的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return UFDate
	 */
	public UFDate getPrepareddate() {
		return m_prepareddate;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-5 11:50:37)
	 * 
	 * @deprecated 不建议使用，因为该值并不一定准确
	 * @return java.lang.String
	 */
	public String getPreparedname() {
		return m_preparedname;
	}

	/**
	 * 返回对象标识，用来唯一定位对象。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getPrimaryKey() {

		return m_pk_voucher;
	}

	/**
	 * 属性m_signdate的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return UFDate
	 */
	public UFDate getSigndate() {
		return m_signdate;
	}

	/**
	 * 属性m_signflag的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return UFBoolean
	 */
	public UFBoolean getSignflag() {
		return m_signflag;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-5 11:50:37)
	 * 
	 * @deprecated 不建议使用，因为该值并不一定准确
	 * @return java.lang.String
	 */
	public String getSystemname() {
		return m_systemname;
	}

	/**
	 * 属性m_tallydate的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return UFDate
	 */
	public UFDate getTallydate() {
		return m_tallydate;
	}

	/**
	 * 属性m_totalcredit的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getTotalcredit() {
		return m_totalcredit;
	}

	/**
	 * 属性m_totaldebit的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return UFDouble
	 */
	public UFDouble getTotaldebit() {
		return m_totaldebit;
	}

	/**
	 * getUserData 方法注解。
	 */
	public Object getUserData() {
		return m_userdata;
	}

	/**
	 * getValue 方法注解。
	 */
	public Object getValue(int intKey) {
		switch (intKey) {
			case VoucherKey.P_DETAILS: // 分录
				return getDetails();
			case VoucherKey.P_VOUCHER: // 分录
				return this;

			case VoucherKey.V_PK_VOUCHER: // 凭证主键
				return getPk_voucher();
			case VoucherKey.V_PK_VOUCHERTYPE: // 凭证类别主键
				return getPk_vouchertype();
			case VoucherKey.V_YEAR: // 会计年度
				return getYear();
			case VoucherKey.V_PERIOD: // 会计期间
				return getPeriod();
			case VoucherKey.V_NO: // 凭证号
				return getNo();
			case VoucherKey.V_PREPAREDDATE: // 制单日期
				return getPrepareddate();
			case VoucherKey.V_TALLYDATE: // 记账日期
				return getTallydate();
			case VoucherKey.V_ATTACHMENT: // 附单据数
				return getAttachment();
			case VoucherKey.V_PK_PREPARED: // 制单人主键
				return getPk_prepared();
			case VoucherKey.V_CREATOR: // 创建人
				return getCreator();
			case VoucherKey.V_PK_CHECKED: // 审核人主键
				return getPk_checked();
			case VoucherKey.V_PK_CASHER: // 出纳主键
				return getPk_casher();
			case VoucherKey.V_PK_MANAGER: // 记账人主键
				return getPk_manager();
			case VoucherKey.V_SIGNFLAG: // 签字标志
				return getSignflag();
			case VoucherKey.V_MODIFYFLAG: // 凭证修改标志
				return getModifyflag();
			case VoucherKey.V_DETAILMODFLAG: // 分录增删标志
				return getDetailmodflag();
			case VoucherKey.V_DISCARDFLAG: // 作废标志
				return getDiscardflag();
			case VoucherKey.V_PK_SYSTEM: // 制单系统主键
				return getPk_system();
			case VoucherKey.V_ADDCLASS: // 增加接口类
				return getAddclass();
			case VoucherKey.V_MODIFYCLASS: // 修改接口类
				return getModifyclass();
			case VoucherKey.V_DELETECLASS: // 删除接口类
				return getDeleteclass();
			case VoucherKey.V_VOUCHERKIND: // 凭证类型
				return getVoucherkind();
			case VoucherKey.V_TOTALDEBIT: // 借方合计
				return getTotaldebit();
			case VoucherKey.V_TOTALCREDIT: // 贷方合计
				return getTotalcredit();
			case VoucherKey.V_TOTALDEBITGROUP:
				return getTotaldebitgroup();
			case VoucherKey.V_TOTALCREDITGROUP:
				return getTotalcreditgroup();
			case VoucherKey.V_TOTALDEBITGLOBAL:
				return getTotaldebitglobal();
			case VoucherKey.V_TOTALCREDITGLOBAL:
				return getTotalcreditglobal();
			case VoucherKey.V_EXPLANATION: // 凭证摘要
				return getExplanation();
			case VoucherKey.V_CONTRASTFLAG: // 对账标志
				return getContrastflag();
			case VoucherKey.V_ERRMESSAGE: // 标错信息
				return getErrmessage();
			case VoucherKey.V_ADJUSTPERIOD: // 调整期间
				return getM_adjustperiod();
			case VoucherKey.V_ISVERIFY: // 是否核销
				return getM_isVerify();
			case VoucherKey.V_FREE1: // 预留字段1，扩展用
				return getFree1();
			case VoucherKey.V_FREE2: // 预留字段2，扩展用
				return getFree2();
			case VoucherKey.V_FREE3: // 预留字段3，扩展用
				return getFree3();
			case VoucherKey.V_FREE4: // 预留字段4，扩展用
				return getFree4();
			case VoucherKey.V_FREE5: // 预留字段5，扩展用
				return getFree5();
			case VoucherKey.V_FREE6: // 预留字段6，扩展用
				return getFree6();
			case VoucherKey.V_FREE7: // 预留字段7，扩展用
				return getFree7();
			case VoucherKey.V_FREE8: // 预留字段8，扩展用
				return getFree8();
			case VoucherKey.V_FREE9: // 预留字段9，扩展用
				return getFree9();
			case VoucherKey.V_FREE10: // 预留字段10，扩展用
				return getFree10();
			case VoucherKey.V_PK_SETOFBOOK: // 
				return getPk_setofbook();
			case VoucherKey.V_PK_FINANCEORG: // 预留字段10，扩展用
				return getPk_org();
			case VoucherKey.V_PK_ACCOUNTINGBOOK: // 预留字段10，扩展用
				return getPk_accountingbook();
			case VoucherKey.V_PK_SOURCEPK: // 预留字段10，扩展用
				return getPk_sourcepk();
			case VoucherKey.V_CONVERTFLAG: // 预留字段10，扩展用
				return getConvertflag();
			case VoucherKey.V_FREEVALUE1: // 凭证表头自定义项1
				return getFreevalue1();
			case VoucherKey.V_FREEVALUE2: // 凭证表头自定义项2
				return getFreevalue2();
			case VoucherKey.V_FREEVALUE3: // 凭证表头自定义项3
				return getFreevalue3();
			case VoucherKey.V_FREEVALUE4: // 凭证表头自定义项4
				return getFreevalue4();
			case VoucherKey.V_FREEVALUE5: // 凭证表头自定义项5
				return getFreevalue5();
				// 辅助信息，数据库中没有，用于界面显示。
			case VoucherKey.V_VOUCHERTYPENAME: // 凭证类别名称
				return getVouchertypename();
			case VoucherKey.V_CORPNAME: // 公司名称
				return getCorpname();
			case VoucherKey.V_PREPAREDNAME: // 制单人名
				return getPreparedname();
			case VoucherKey.V_CHECKEDNAME: // 审核人名
				return getCheckedname();
			case VoucherKey.V_CASHERNAME: // 出纳人名
				return getCashername();
			case VoucherKey.V_MANAGERNAME: // 记账人名
				return getManagername();
			case VoucherKey.V_SYSTEMNAME: // 制单系统名称
				return getSystemname();
				// 表体数据
			case VoucherKey.P_DETAIL: // 分录
				return getDetail();

			case VoucherKey.V_ISMATCHED: // 勾对标志，辅助信息，表示凭证是否被现金银行或集团对账等其他模块勾对过。
				return getIsmatched();
			case VoucherKey.V_USERDATA: // 辅助信息，用于外系统接口。
				return getUserData();
			case VoucherKey.V_TOTALMARGIN: // 合计差额
				return getTotalcredit().sub(getTotaldebit(), getTotalcredit().getPower()).abs();
			case VoucherKey.V_TEMPSAVEFLAG:
				return getTempsaveflag();
			case VoucherKey.V_PK_ORG:
				return getPk_org();
			case VoucherKey.V_PK_ORG_V:
				return getPk_org_v();
			default:
				throw new RuntimeException("No such VoucherKey::" + intKey);
		}
	}

	/**
	 * 属性m_voucherkind的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return Integer
	 */
	public Integer getVoucherkind() {
		return m_voucherkind;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-5 11:50:37)
	 * 
	 * @deprecated 不建议使用，因为该值并不一定准确
	 * @return java.lang.String
	 */
	public String getVouchertypename() {
		return m_vouchertypename;
	}

	/**
	 * 属性m_year的Getter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @return String
	 */
	public String getYear() {
		return m_year;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-10-18 15:51:56)
	 * 
	 * @param detail
	 *            nc.vo.gl.pubvoucher.DetailVO
	 */
	public void insertDetail(DetailVO detail, int index) {
		getDetail_Create().insertElementAt(detail.clone(), index);
	}

	/**
	 * 属性m_addclass的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_addclass
	 *            String
	 */
	public void setAddclass(String newAddclass) {

		m_addclass = newAddclass;
	}

	/**
	 * 属性m_attachment的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_attachment
	 *            Integer
	 */
	public void setAttachment(Integer newAttachment) {

		m_attachment = newAttachment;
	}

	/**
	 * <p>
	 * 对参数name对型的属性设置值。
	 * <p>
	 * 创建日期：(2003-9-28)
	 * 
	 * @param key
	 *            java.lang.String
	 */
	public void setAttributeValue(String name, Object value) {

		try {
			if (name.equals("pk_voucher")) {
				m_pk_voucher = (String) value;
			} else if (name.equals("addclass")) {
				m_addclass = (String) value;
			} else if (name.equals("attachment")) {
				m_attachment = (Integer) value;
			} else if (name.equals("contrastflag")) {
				m_contrastflag = (Integer) value;
			} else if (name.equals("deleteclass")) {
				m_deleteclass = (String) value;
			} else if (name.equals("detailmodflag")) {
				m_detailmodflag = (UFBoolean) value;
			} else if (name.equals("discardflag")) {
				m_discardflag = (UFBoolean) (value == null ? UFBoolean.FALSE : value);
			} else if (name.equals("errmessage")) {
				m_errmessage = (String) value;
			} else if (name.equals("explanation")) {
				m_explanation = (String) value;
			} else if (name.equals("free1")) {
				m_free1 = (String) value;
			} else if (name.equals("adjustperiod")) {
				m_adjustperiod = (String) value;
			} else if (name.equals("free10")) {
				m_free10 = (String) value;
			} else if (name.equals("free2")) {
				m_free2 = (String) value;
			} else if (name.equals("free3")) {
				m_free3 = (String) value;
			} else if (name.equals("free4")) {
				m_free4 = (String) value;
			} else if (name.equals("free5")) {
				m_free5 = (String) value;
			} else if (name.equals("free6")) {
				m_free6 = (String) value;
			} else if (name.equals("free7")) {
				m_free7 = (String) value;
			} else if (name.equals("free8")) {
				m_free8 = (String) value;
			} else if (name.equals("free9")) {
				m_free9 = (String) value;
			} else if (name.equals("modifyclass")) {
				m_modifyclass = (String) value;
			} else if (name.equals("modifyflag")) {
				m_modifyflag = (String) value;
			} else if (name.equals("num")) {
				m_num = (Integer) value;
			} else if (name.equals("period")) {
				m_period = (String) value;
			} else if (name.equals("pk_casher")) {
				m_pk_casher = (String) value;
			} else if (name.equals("pk_checked")) {
				m_pk_checked = (String) value;
			} else if (name.equals("pk_manager")) {
				m_pk_manager = (String) value;
			} else if (name.equals("pk_prepared")) {
				m_pk_prepared = (String) value;
			} else if (name.equals("pk_system")) {
				m_pk_system = (String) value;
			} else if (name.equals("pk_vouchertype")) {
				m_pk_vouchertype = (String) value;
			} else if (name.equals("prepareddate")) {
				m_prepareddate = (UFDate) value;
			} else if (name.equals("signflag")) {
				m_signflag = (UFBoolean) value;
			} else if (name.equals("tallydate")) {
				m_tallydate = (UFDate) value;
			} else if (name.equals("totalcredit")) {
				m_totalcredit = (UFDouble) value;
			} else if (name.equals("totaldebit")) {
				m_totaldebit = (UFDouble) value;
			} else if (name.equals("voucherkind")) {
				m_voucherkind = (Integer) value;
			} else if (name.equals("year")) {
				m_year = (String) value;
			} else if (name.equals("signdate")) {
				m_signdate = (UFDate) value;
			} else if (name.equals("checkeddate")) {
				m_checkeddate = (UFDate) value;
			} else if (name.equals("billmaker")) {
				billmaker = (String) value;
			} else if (name.equals("approver")) {
				approver = (String) value;
			} else if (name.equals("creator")) {
				creator = (String) value;
			} else if (name.equals("tempsaveflag")) {
				m_tempsaveflag = (UFBoolean) value;
			} else if (name.equals("aggdetails")) {
				setDetails((MDDetail[]) value);
			}else if (name.equals("details")) {
				setDetails((DetailVO[])value);
			}

		} catch (ClassCastException e) {
			Logger.error(e.getMessage(), e);
			if(value == null) {
				value = "";
			}
			throw new ClassCastException(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("2002GL502", "UPP2002GL502-000264",null,new String[]{name,(String)value})/*
																																 * @res "setAttributeValue方法中为{0}赋值时类型转换错误！（值：{1}） "
																																 */
					);
		}
	}

	private void setDetails(MDDetail[] value) {
		this.setDetailsBySetter(value);
		// for(int i=0;i<value.length;i++){
		// DetailVO newDetail = new DetailVO();
		// String[] names = value[i].getAttributeNames();
		// for(String name : names)
		// newDetail.setAttributeValue(name, value[i].getAttributeValue(name));
		// insertDetail(newDetail, i);
		// }

	}

	private void setDetailsBySetter(MDDetail[] value) {
		if (value == null) {
			return;
		}

		MDDetail srcDetail = null;
		for (int index = 0; index < value.length; index++) {

			srcDetail = value[index];
			DetailVO newDetail = new DetailVO();
			newDetail.setUnitname(srcDetail.getUnitname());
			newDetail.setPeriod(srcDetail.getPeriodv());
			newDetail.setErrmessageh(srcDetail.getErrmessage());
			newDetail.setExcrate3(srcDetail.getExcrate3());
			newDetail.setExcrate2(srcDetail.getExcrate2());
			newDetail.setExcrate1(srcDetail.getExcrate1());
			newDetail.setExcrate4(srcDetail.getExcrate4());
			newDetail.setDebitamount(srcDetail.getDebitamount() == null ? UFDouble.ZERO_DBL : srcDetail.getDebitamount());
			newDetail.setCreditamount(srcDetail.getCreditamount() == null ? UFDouble.ZERO_DBL : srcDetail.getCreditamount());
			newDetail.setPk_otherorgbook(srcDetail.getPk_otherorgbook());
			newDetail.setIsdifflag(srcDetail.getIsdifflag());
			newDetail.setPk_sob(srcDetail.getPk_setofbook());
			newDetail.setDebitquantity(srcDetail.getDebitquantity() == null ? UFDouble.ZERO_DBL : srcDetail.getDebitquantity());
			newDetail.setDiscardflag(srcDetail.getDiscardflagv());
			newDetail.setConvertflag(srcDetail.getConvertflag());
			newDetail.setPrice(srcDetail.getPrice());
			newDetail.setYear(srcDetail.getYearv());
			if (srcDetail.getVerifydate() != null)
				newDetail.setVerifydate(srcDetail.getVerifydate().toString());
			newDetail.setNo(srcDetail.getNov());
			newDetail.setPk_group(srcDetail.getPk_group());
			newDetail.setFree9(srcDetail.getFreevalue9());
			newDetail.setFreevalue5(srcDetail.getFreevalue5());
			// newDetail.setFree1(srcDetail.getFree1());
			newDetail.setPk_vouchertype(srcDetail.getPk_vouchertypev());
			newDetail.setFreevalue6(srcDetail.getFreevalue6());
			// newDetail.setfree
			newDetail.setTempsaveflag(srcDetail.getTempsaveflag());
			newDetail.setFreevalue7(srcDetail.getFreevalue7());
			// newDetail.setfree
			newDetail.setFreevalue8(srcDetail.getFreevalue8());
			// newDetail.setfree5
			// newDetail.setfree4
			newDetail.setPk_manager(srcDetail.getPk_managerv());
			newDetail.setFree7(srcDetail.getFree7());
			// newDetail.setfree6
			newDetail.setDetailindex(srcDetail.getDetailindex());
			newDetail.setFree9(srcDetail.getFree9());
			newDetail.setFree10(srcDetail.getFree10());
			newDetail.setFree8(srcDetail.getFree8());
			if (srcDetail.getSigndatev() != null)
				newDetail.setSigndate(srcDetail.getSigndatev().toString());
			newDetail.setFreevalue23(srcDetail.getFreevalue23());
			newDetail.setFreevalue24(srcDetail.getFreevalue24());
			newDetail.setAdjustperiod(srcDetail.getAdjustperiod());
			newDetail.setFreevalue21(srcDetail.getFreevalue21());
			newDetail.setFreevalue22(srcDetail.getFreevalue22());
			newDetail.setBusireconno(srcDetail.getBusireconno());
			newDetail.setCheckdate(srcDetail.getCheckdate());
			newDetail.setFreevalue20(srcDetail.getFreevalue20());
			newDetail.setFreevalue2(srcDetail.getFreevalue2());
			newDetail.setFreevalue1(srcDetail.getFreevalue1());
			newDetail.setFreevalue4(srcDetail.getFreevalue4());
			newDetail.setFreevalue29(srcDetail.getFreevalue29());
			newDetail.setFreevalue3(srcDetail.getFreevalue3());
			newDetail.setFreevalue27(srcDetail.getFreevalue27());
			newDetail.setFreevalue28(srcDetail.getFreevalue28());
			newDetail.setFreevalue25(srcDetail.getFreevalue25());
			newDetail.setFreevalue26(srcDetail.getFreevalue26());
			newDetail.setPk_system(srcDetail.getPk_systemv());
			newDetail.setOppositesubj(srcDetail.getOppositesubj());
			newDetail.setPk_innersob(srcDetail.getPk_innersob());
			newDetail.setFreevalue30(srcDetail.getFreevalue30());
			newDetail.setPk_accasoa(srcDetail.getPk_accasoa());
			if (srcDetail.getInnerbusdate() != null)
				newDetail.setInnerbusdate(srcDetail.getInnerbusdate().toString());
			newDetail.setGlobalcreditamount(srcDetail.getGlobalcreditamount() == null ? UFDouble.ZERO_DBL : srcDetail.getGlobalcreditamount());
			newDetail.setGlobaldebitamount(srcDetail.getGlobaldebitamount() == null ? UFDouble.ZERO_DBL : srcDetail.getGlobaldebitamount());
			newDetail.setBankaccount(srcDetail.getBankaccount());
			nc.vo.gl.aggvoucher.FreeValueVO srcVOs[] = srcDetail.getAssidarray();
			if (srcVOs != null) {
				AssVO newVOs[] = new AssVO[srcVOs.length];
				for (int i = 0; i < newVOs.length; i++) {
					newVOs[i] = new AssVO();
					newVOs[i].setPk_Checktype(srcVOs[i].getChecktype());
					newVOs[i].setPk_Checkvalue(srcVOs[i].getCheckvalue());
					// newVOs[i].setChecktypecode(srcVOs[i].get);
					// newVOs[i].setChecktypename(newPk_Checktype);
					newVOs[i].setCheckvaluecode(srcVOs[i].getValuecode());
					newVOs[i].setCheckvaluename(srcVOs[i].getValuename());

					// newVOs[i].setUserData(srcVOs[i].get);
					// newVOs[i].setnote1(srcVOs[i].getn);
					// newVOs[i].setnote2(newM_note2);
					// newVOs[i].setM_length(srcVOs[i].getm);
					// newVOs[i].setM_digit(srcVOs[i].getd);
					// newVOs[i].setM_classid(srcVOs[i].getc);
					// newVOs[i].setM_metaClassid(srcVOs[i].getMetaData().get);
					// newVOs[i].setInnerCode(srcVOs[i].);
					// newVOs[i].setDirty(srcVOs[i].getd);
				}
				newDetail.setAss(newVOs);
			}
			
			//处理VAT信息
			VatDetailVO vatDetailVo = srcDetail.getVatdetailarray();
			newDetail.setVatdetail(vatDetailVo);
			
			newDetail.setPk_sourcepk(srcDetail.getPk_sourcepk());
			newDetail.setAssid(srcDetail.getAssid());
			newDetail.setBilltype(srcDetail.getBilltype());
			newDetail.setPk_currtype(srcDetail.getPk_currtype());
			newDetail.setNetbankflag(srcDetail.getNetbankflag());
			newDetail.setPk_othercorp(srcDetail.getPk_othercorp());
			newDetail.setExplanation(srcDetail.getExplanation());
			newDetail.setPk_voucher(srcDetail.getPk_voucher());
			newDetail.setFreevalue15(srcDetail.getFreevalue15());
			newDetail.setFreevalue14(srcDetail.getFreevalue14());
			newDetail.setFreevalue17(srcDetail.getFreevalue17());
			newDetail.setModifyflag(srcDetail.getModifyflag());
			newDetail.setFreevalue16(srcDetail.getFreevalue16());
			newDetail.setFreevalue19(srcDetail.getFreevalue19());
			newDetail.setFreevalue19(srcDetail.getFreevalue19());
			newDetail.setCheckstyle(srcDetail.getCheckstyle());
			newDetail.setFreevalue11(srcDetail.getFreevalue11());
			newDetail.setPrepareddate(srcDetail.getPrepareddatev());
			newDetail.setGroupdebitamount(srcDetail.getGroupdebitamount() == null ? UFDouble.ZERO_DBL : srcDetail.getGroupdebitamount());
			newDetail.setGroupcreditamount(srcDetail.getGroupcreditamount() == null ? UFDouble.ZERO_DBL : srcDetail.getGroupcreditamount());
			newDetail.setInnerbusno(srcDetail.getInnerbusno());
			newDetail.setFreevalue10(srcDetail.getFreevalue10());
			newDetail.setPk_detail(srcDetail.getPk_detail());
			newDetail.setFreevalue13(srcDetail.getFreevalue13());
			newDetail.setFreevalue12(srcDetail.getFreevalue12());
			newDetail.setErrmessage(srcDetail.getErrmessage());
			newDetail.setFracdebitamount(srcDetail.getFracdebitamount());
			newDetail.setPk_org(srcDetail.getPk_org());
			newDetail.setPk_unit(srcDetail.getPk_unit());
			newDetail.setPk_unit_v(srcDetail.getPk_unit_v());
			if (srcDetail.getDirection() != null)
				newDetail.setDirection(srcDetail.getDirection().toString());
			newDetail.setPk_innercorp(srcDetail.getPk_innerorg());
			newDetail.setPk_offerdetail(srcDetail.getPk_offerdetail());
			newDetail.setPk_org(srcDetail.getPk_org());
			newDetail.setPk_org_v(srcDetail.getPk_org_v());
			newDetail.setCreditquantity(srcDetail.getCreditquantity() == null ? UFDouble.ZERO_DBL : srcDetail.getCreditquantity());
			newDetail.setCheckno(srcDetail.getCheckno());
			newDetail.setErrmessage2(srcDetail.getErrmessage2());
			newDetail.setContrastflag(srcDetail.getContrastflag());
			newDetail.setRecieptclass(srcDetail.getRecieptclass());
			newDetail.setVoucherkind(srcDetail.getVoucherkindv());
			newDetail.setFraccreditamount(srcDetail.getFraccreditamount());
			newDetail.setLocaldebitamount(srcDetail.getLocaldebitamount() == null ? UFDouble.ZERO_DBL : srcDetail.getLocaldebitamount());
			newDetail.setLocalcreditamount(srcDetail.getLocalcreditamount() == null ? UFDouble.ZERO_DBL : srcDetail.getLocalcreditamount());
			newDetail.setPk_accountingbook(srcDetail.getPk_accountingbook());
			newDetail.setVerifyno(srcDetail.getVerifyno());
			newDetail.setPk_cashflow(srcDetail.getCashflowitem());
			newDetail.setPk_innercorp2(srcDetail.getPk_innercorp());//63EHP2内部单位

			insertDetail(newDetail, index);

		}

	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-5 11:50:37)
	 * 
	 * @param newM_cashername
	 *            java.lang.String
	 */
	public void setCashername(String newCashername) {
		m_cashername = newCashername;
	}

	/**
	 * 属性m_checkeddate的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_checkeddate
	 *            UFDate
	 */
	public void setCheckeddate(UFDate newCheckeddate) {

		m_checkeddate = newCheckeddate;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-5 11:50:37)
	 * 
	 * @param newM_checkedname
	 *            java.lang.String
	 */
	public void setCheckedname(String newCheckedname) {
		m_checkedname = newCheckedname;
	}

	/**
	 * 属性m_contrastflag的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_contrastflag
	 *            Integer
	 */
	public void setContrastflag(Integer newContrastflag) {

		m_contrastflag = newContrastflag;
	}

	/**
	 * 属性m_convertflag的setter方法。
	 * 
	 * 创建日期：(2005-1-14)
	 * 
	 * @param newM_convertflag
	 *            UFBoolean
	 */
	public void setConvertflag(UFBoolean newConvertflag) {

		m_convertflag = newConvertflag;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-5 11:50:37)
	 * 
	 * @param newM_corpname
	 *            java.lang.String
	 */
	public void setCorpname(String newCorpname) {
		m_corpname = newCorpname;
	}

	/**
	 * 属性m_deleteclass的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_deleteclass
	 *            String
	 */
	public void setDeleteclass(String newDeleteclass) {

		m_deleteclass = newDeleteclass;
	}

	/**
	 * 属性m_detail的setter方法。
	 * 
	 * 创建日期：(2001-8-20)
	 * 
	 * @param newM_deleteclass
	 *            String
	 */
	public void setDetail(Vector newDetail) {
		m_detail = newDetail;
	}

	/**
	 * 属性m_detail的setter方法。
	 * 
	 * 创建日期：(2001-8-20)
	 * 
	 * @param newM_deleteclass
	 *            String
	 * 
	 *            注意：iIndex是detail在voucher里的序列号，与分录号不同，是从"0"开始的。
	 */
	public void setDetail(DetailVO newDetail, int iIndex) {
		m_detail.setElementAt(newDetail, iIndex);
	}

	/**
	 * 属性m_detailmodflag的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_detailmodflag
	 *            UFBoolean
	 */
	public void setDetailmodflag(UFBoolean newDetailmodflag) {

		m_detailmodflag = newDetailmodflag;
	}

	/**
	 * 属性m_detail的setter方法。
	 * 
	 * 创建日期：(2001-8-20)
	 * 
	 * @param newM_deleteclass
	 *            String
	 */
	public void setDetails(DetailVO[] newDetail) {
		getDetail_Create().clear();
		if (newDetail == null)
			return;
		for (int i = 0; i < newDetail.length; i++) {
			if (newDetail[i] != null) {
				getDetail_Create().addElement(newDetail[i].clone());
			}
		}
		details = getDetails();
		return;
	}

	/**
	 * 属性m_discardflag的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_discardflag
	 *            UFBoolean
	 */
	public void setDiscardflag(UFBoolean newDiscardflag) {

		m_discardflag = newDiscardflag;
	}

	/**
	 * 属性m_errmessage的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_errmessage
	 *            String
	 */
	public void setErrmessage(String newErrmessage) {

		m_errmessage = newErrmessage;
	}

	/**
	 * 属性m_explanation的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_explanation
	 *            String
	 */
	public void setExplanation(String newExplanation) {

		m_explanation = newExplanation;
	}

	/**
	 * 属性m_free1的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_free1
	 *            String
	 */

	public void setFree1(String newFree1) {

		m_free1 = newFree1;
	}

	public void setM_adjustperiod(String newFree1) {

		m_adjustperiod = newFree1;
	}

	/**
	 * 属性m_free10的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_free10
	 *            String
	 */
	public void setFree10(String newFree10) {

		m_free10 = newFree10;
	}

	/**
	 * 属性m_free2的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_free2
	 *            String
	 */
	public void setFree2(String newFree2) {

		m_free2 = newFree2;
	}

	/**
	 * 属性m_free3的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_free3
	 *            String
	 */
	public void setFree3(String newFree3) {

		m_free3 = newFree3;
	}

	/**
	 * 属性m_free4的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_free4
	 *            String
	 */
	public void setFree4(String newFree4) {

		m_free4 = newFree4;
	}

	/**
	 * 属性m_free5的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_free5
	 *            String
	 */
	public void setFree5(String newFree5) {

		m_free5 = newFree5;
	}

	/**
	 * 属性m_free6的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_free6
	 *            String
	 */
	public void setFree6(String newFree6) {

		m_free6 = newFree6;
	}

	/**
	 * 属性m_free7的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_free7
	 *            String
	 */
	public void setFree7(String newFree7) {

		m_free7 = newFree7;
	}

	/**
	 * 属性m_free8的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_free8
	 *            String
	 */
	public void setFree8(String newFree8) {

		m_free8 = newFree8;
	}

	/**
	 * 属性m_free9的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_free9
	 *            String
	 */
	public void setFree9(String newFree9) {

		m_free9 = newFree9;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2002-9-18 11:52:14)
	 * 
	 * @param newM_freevalue1
	 *            java.lang.String
	 */
	public void setFreevalue1(String newM_freevalue1) {
		m_freevalue1 = newM_freevalue1;
	}

	public void setFreevalue2(String newM_freevalue) {
		m_freevalue2 = newM_freevalue;
	}

	public void setFreevalue3(String newM_freevalue) {
		m_freevalue3 = newM_freevalue;
	}

	public void setFreevalue4(String newM_freevalue) {
		m_freevalue4 = newM_freevalue;
	}

	public void setFreevalue5(String newM_freevalue) {
		m_freevalue5 = newM_freevalue;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2002-4-10 18:41:37)
	 * 
	 * @param newM_ismatched
	 *            java.lang.Boolean
	 */
	public void setIsmatched(Boolean newM_ismatched) {
		m_ismatched = newM_ismatched;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2003-9-22 17:46:03)
	 * 
	 * @param newM_isoutsubj
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIsOutSubj(nc.vo.pub.lang.UFBoolean newM_isoutsubj) {
		m_isoutsubj = newM_isoutsubj;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-5 11:50:37)
	 * 
	 * @param newM_managername
	 *            java.lang.String
	 */
	public void setManagername(String newManagername) {
		m_managername = newManagername;
	}

	/**
	 * 属性m_modifyclass的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_modifyclass
	 *            String
	 */
	public void setModifyclass(String newModifyclass) {

		m_modifyclass = newModifyclass;
	}

	/**
	 * 属性m_modifyflag的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_modifyflag
	 *            String
	 */
	public void setModifyflag(String newModifyflag) {

		m_modifyflag = newModifyflag;
	}

	/**
	 * 属性m_no的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_no
	 *            Integer
	 */
	public void setNo(Integer newNo) {
		m_num = newNo;
		DetailVO[] details = getDetails();
		if (details != null && details.length > 0)
			for (int i = 0; i < details.length; i++) {
				DetailVO detailVO = details[i];
				detailVO.setNo(newNo);
			}
	}

	/**
	 * 属性m_period的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_period
	 *            String
	 */
	public void setPeriod(String newPeriod) {

		m_period = newPeriod;
	}

	/**
	 * 属性m_pk_casher的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_pk_casher
	 *            String
	 */
	public void setPk_casher(String newPk_casher) {

		m_pk_casher = newPk_casher;
	}

	/**
	 * 属性m_pk_checked的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_pk_checked
	 *            String
	 */
	public void setPk_checked(String newPk_checked) {

		m_pk_checked = newPk_checked;
		this.setApprover(newPk_checked);
	}

	/**
	 * 属性m_pk_glbook的setter方法。
	 * 
	 * 创建日期：(2005-1-14)
	 * 
	 * @param newM_pk_glbook
	 *            String
	 */
	public void setPk_setofbook(String newPk_setofbook) {
		m_pk_setofbook = newPk_setofbook;
	}

	/**
	 * 属性m_pk_glorg的setter方法。
	 * 
	 * 创建日期：(2005-1-14)
	 * 
	 * @param newM_pk_glorg
	 *            String
	 */
	public void setPk_org(String newPk_financeorg) {

		m_pk_org = newPk_financeorg;
	}

	/**
	 * 属性m_pk_glorgbook的setter方法。
	 * 
	 * 创建日期：(2005-1-14)
	 * 
	 * @param newM_pk_glorgbook
	 *            String
	 */
	public void setPk_accountingbook(String newPk_accountingbook) {

		m_pk_accountingbook = newPk_accountingbook;
	}

	/**
	 * 属性m_pk_manager的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_pk_manager
	 *            String
	 */
	public void setPk_manager(String newPk_manager) {

		m_pk_manager = newPk_manager;
	}

	/**
	 * 属性m_pk_prepared的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_pk_prepared
	 *            String
	 */
	public void setPk_prepared(String newPk_prepared) {

		m_pk_prepared = newPk_prepared;
		this.setBillmaker(newPk_prepared);
	}

	/**
	 * 属性m_pk_sourcepk的setter方法。
	 * 
	 * 创建日期：(2005-1-14)
	 * 
	 * @param newM_pk_sourcepk
	 *            String
	 */
	public void setPk_sourcepk(String newPk_sourcepk) {

		m_pk_sourcepk = newPk_sourcepk;
	}

	/**
	 * 属性m_pk_system的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_pk_system
	 *            String
	 */
	public void setPk_system(String newPk_system) {
		// if ("GL".equals(newPk_system))
		// m_pk_system = "200201";
		if ("2002".equals(newPk_system))
			m_pk_system = "GL";
		else
			m_pk_system = newPk_system;
	}

	/**
	 * 属性m_pk_voucher的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_pk_voucher
	 *            String
	 */
	public void setPk_voucher(String newPk_voucher) {

		m_pk_voucher = newPk_voucher;
	}

	/**
	 * 属性m_pk_vouchertype的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_pk_vouchertype
	 *            String
	 */
	public void setPk_vouchertype(String newPk_vouchertype) {

		m_pk_vouchertype = newPk_vouchertype;
	}

	/**
	 * 属性m_prepareddate的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_prepareddate
	 *            UFDate
	 */
	public void setPrepareddate(UFDate newPrepareddate) {

		m_prepareddate = newPrepareddate;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-5 11:50:37)
	 * 
	 * @param newM_preparedname
	 *            java.lang.String
	 */
	public void setPreparedname(String newPreparedname) {
		m_preparedname = newPreparedname;
	}

	/**
	 * 设置对象标识，用来唯一定位对象。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param m_pk_voucher
	 *            String
	 */
	public void setPrimaryKey(String newPk_voucher) {

		m_pk_voucher = newPk_voucher;
	}

	/**
	 * 属性m_signdate的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_signdate
	 *            UFDate
	 */
	public void setSigndate(UFDate newSigndate) {

		m_signdate = newSigndate;
	}

	/**
	 * 属性m_signflag的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_signflag
	 *            UFBoolean
	 */
	public void setSignflag(UFBoolean newSignflag) {

		m_signflag = newSignflag;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-5 11:50:37)
	 * 
	 * @param newM_systemname
	 *            java.lang.String
	 */
	public void setSystemname(String newSystemname) {
		m_systemname = newSystemname;
	}

	/**
	 * 属性m_tallydate的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_tallydate
	 *            UFDate
	 */
	public void setTallydate(UFDate newTallydate) {

		m_tallydate = newTallydate;
	}

	/**
	 * 属性m_totalcredit的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_totalcredit
	 *            UFDouble
	 */
	public void setTotalcredit(UFDouble newTotalcredit) {

		m_totalcredit = newTotalcredit;
	}

	/**
	 * 属性m_totaldebit的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_totaldebit
	 *            UFDouble
	 */
	public void setTotaldebit(UFDouble newTotaldebit) {

		m_totaldebit = newTotaldebit;
	}

	/**
	 * setUserData 方法注解。
	 */
	public void setUserData(Object objUserData) {
		m_userdata = objUserData;
	}

	public void setValue(int iKey, Object objNewValue) {
		switch (iKey) {
			case VoucherKey.P_DETAILS: // 分录
				setDetails((DetailVO[]) objNewValue);
				break;
			// case VoucherKey.P_VOUCHER : //分录
			// this = obj;
			case VoucherKey.V_PK_VOUCHER: // 凭证主键
				setPk_voucher(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_PK_VOUCHERTYPE: // 凭证类别主键
				setPk_vouchertype(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_YEAR: // 会计年度
				setYear(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_PERIOD: // 会计期间
				setPeriod(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_NO: // 凭证号
				setNo(objNewValue == null ? Integer.valueOf(0) : Integer.valueOf(objNewValue.toString().trim()));
				break;
			case VoucherKey.V_PREPAREDDATE: // 制单日期
				setPrepareddate(objNewValue == null ? null : new UFDate(objNewValue.toString().trim()));
				break;
			case VoucherKey.V_TALLYDATE: // 记账日期
				setTallydate(objNewValue == null ? null : new UFDate(objNewValue.toString().trim()));
				break;
			case VoucherKey.V_ATTACHMENT: // 附单据数
				setAttachment(objNewValue == null ? Integer.valueOf(0) : Integer.valueOf(objNewValue.toString().trim()));
				break;
			case VoucherKey.V_PK_PREPARED: // 制单人主键
				setPk_prepared(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_PK_CHECKED: // 审核人主键
				setPk_checked(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_PK_CASHER: // 出纳主键
				setPk_casher(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_PK_MANAGER: // 记账人主键
				setPk_manager(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_SIGNFLAG: // 签字标志
				setSignflag(objNewValue == null ? nc.vo.pub.lang.UFBoolean.FALSE : UFBoolean.valueOf(objNewValue.toString().trim()));
				break;
			case VoucherKey.V_MODIFYFLAG: // 凭证修改标志
				setModifyflag(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_DETAILMODFLAG: // 分录增删标志
				setDetailmodflag(objNewValue == null ? nc.vo.pub.lang.UFBoolean.TRUE : UFBoolean.valueOf(objNewValue.toString().trim()));
				break;
			case VoucherKey.V_DISCARDFLAG: // 作废标志
				setDiscardflag(objNewValue == null ? nc.vo.pub.lang.UFBoolean.FALSE : UFBoolean.valueOf(objNewValue.toString().trim()));
				break;
			case VoucherKey.V_PK_SYSTEM: // 制单系统主键
				setPk_system(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_ADDCLASS: // 增加接口类
				setAddclass(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_MODIFYCLASS: // 修改接口类
				setModifyclass(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_DELETECLASS: // 删除接口类
				setDeleteclass(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_VOUCHERKIND: // 凭证类型
				setVoucherkind(objNewValue == null ? Integer.valueOf(0) : Integer.valueOf(objNewValue.toString().trim()));
				break;
			case VoucherKey.V_TOTALDEBIT: // 借方合计
				setTotaldebit(objNewValue == null ? new UFDouble(0) : new UFDouble(objNewValue.toString().trim()));
				break;
			case VoucherKey.V_TOTALCREDIT: // 贷方合计
				setTotalcredit(objNewValue == null ? new UFDouble(0) : new UFDouble(objNewValue.toString().trim()));
				break;
			case VoucherKey.V_EXPLANATION: // 凭证摘要
				setExplanation(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_CONTRASTFLAG: // 对账标志
				setContrastflag(objNewValue == null ? Integer.valueOf(0) : Integer.valueOf(objNewValue.toString().trim()));
				break;
			case VoucherKey.V_ERRMESSAGE: // 标错信息
				setErrmessage(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_ADJUSTPERIOD: // 调整期间
				setM_adjustperiod(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_ISVERIFY: // 是否核销
				setM_isVerify(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_FREE1: // 预留字段1，扩展用
				setFree1(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_FREE2: // 预留字段2，扩展用
				setFree2(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_FREE3: // 预留字段3，扩展用
				setFree3(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_FREE4: // 预留字段4，扩展用
				setFree4(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_FREE5: // 预留字段5，扩展用
				setFree5(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_FREE6: // 预留字段6，扩展用
				setFree6(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_FREE7: // 预留字段7，扩展用
				setFree7(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_FREE8: // 预留字段8，扩展用
				setFree8(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_FREE9: // 预留字段9，扩展用
				setFree9(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_FREE10: // 预留字段10，扩展用
				setFree10(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_PK_SETOFBOOK: // 预留字段10，扩展用
				setPk_setofbook(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_PK_FINANCEORG: // 预留字段10，扩展用
				setPk_org(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_PK_ACCOUNTINGBOOK: // 预留字段10，扩展用
				setPk_accountingbook(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_PK_SOURCEPK: // 预留字段10，扩展用
				setPk_sourcepk(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_CONVERTFLAG: // 预留字段10，扩展用
				setConvertflag(objNewValue == null ? null : UFBoolean.valueOf(objNewValue.toString().trim()));
				break;
			case VoucherKey.V_FREEVALUE1: // 凭证表头自定义项1
				setFreevalue1(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_FREEVALUE2: // 凭证表头自定义项2
				setFreevalue2(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_FREEVALUE3: // 凭证表头自定义项3
				setFreevalue3(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_FREEVALUE4: // 凭证表头自定义项4
				setFreevalue4(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_FREEVALUE5: // 凭证表头自定义项5
				setFreevalue5(objNewValue == null ? null : objNewValue.toString().trim());
				// 辅助信息，数据库中没有，用于界面显示。
				break;
			case VoucherKey.V_VOUCHERTYPENAME: // 凭证类别名称
				setVouchertypename(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_CORPNAME: // 公司名称
				setCorpname(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_PREPAREDNAME: // 制单人名
				setPreparedname(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_CHECKEDNAME: // 审核人名
				setCheckedname(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_CASHERNAME: // 出纳人名
				setCashername(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_MANAGERNAME: // 记账人名
				setManagername(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_SYSTEMNAME: // 制单系统名称
				setSystemname(objNewValue == null ? null : objNewValue.toString().trim());
				// 表体数据
				break;
			case VoucherKey.P_DETAIL: // 分录
				setDetail(objNewValue == null ? null : (Vector) objNewValue);
				break;
			case VoucherKey.V_ISMATCHED: // 勾对标志，辅助信息，表示凭证是否被现金银行或集团对账等其他模块勾对过。
				setIsmatched(objNewValue == null ? new Boolean(false) : (Boolean) objNewValue);
				break;
			case VoucherKey.V_USERDATA: // 辅助信息，用于外系统接口。
				setUserData(objNewValue == null ? null : objNewValue);
				break;
			case VoucherKey.V_PK_GROUP: // 调整期间
				setPk_group(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_CREATOR:
				setCreator(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_CTEATIONTIME:
				setCreationtime(objNewValue == null ? null : (UFDateTime) objNewValue);
				break;
			case VoucherKey.V_MODIFIER:
				setModifier(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_MODIFIEDTIME:
				setModifiedtime(objNewValue == null ? null : (UFDateTime) objNewValue);
				break;
			case VoucherKey.V_TEMPSAVEFLAG:
				setTempsaveflag(objNewValue == null ? null : (UFBoolean) objNewValue);
				break;
			case VoucherKey.V_PK_ORG:
				setPk_org(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_PK_ORG_V:
				setPk_org_v(objNewValue == null ? null : objNewValue.toString().trim());
				break;
			case VoucherKey.V_TOTALMARGIN: // 合计差额
				throw new RuntimeException("This Key can not be use in setValue() method::" + iKey);
			default:
				throw new RuntimeException("No such VoucherKey::" + iKey);
		}
	}

	/**
	 * 属性m_voucherkind的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_voucherkind
	 *            Integer
	 */
	public void setVoucherkind(Integer newVoucherkind) {

		m_voucherkind = newVoucherkind;
	}

	/**
	 * 此处插入方法说明。 创建日期：(2001-11-5 11:50:37)
	 * 
	 * @param newM_vouchertypename
	 *            java.lang.String
	 */
	public void setVouchertypename(String newVouchertypename) {
		m_vouchertypename = newVouchertypename;
	}

	/**
	 * 属性m_year的setter方法。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @param newM_year
	 *            String
	 */
	public void setYear(String newYear) {

		m_year = newYear;
	}

	/**
	 * 验证对象各属性之间的数据逻辑正确性。
	 * 
	 * 创建日期：(2003-9-28)
	 * 
	 * @exception nc.vo.pub.ValidationException
	 *                如果验证失败，抛出 ValidationException，对错误进行解释。
	 */
	public void validate() throws ValidationException {

		ArrayList errFields = new ArrayList(); // errFields record those null
		// fields that cannot be null.
		// 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
		if (m_pk_voucher == null) {
			errFields.add(new String("m_pk_voucher"));
		}
		if (m_discardflag == null) {
			errFields.add(new String("m_discardflag"));
		}
		if (m_pk_system == null) {
			errFields.add(new String("m_pk_system"));
		}
		if (m_voucherkind == null) {
			errFields.add(new String("m_voucherkind"));
		}
		// construct the exception message:
		StringBuffer message = new StringBuffer();
		message.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("2002GL502", "UPP2002GL502-000262")/* @res "下列字段不能为空：" */);
		if (errFields.size() > 0) {
			String[] temp = (String[]) errFields.toArray(new String[0]);
			message.append(temp[0]);
			for (int i = 1; i < temp.length; i++) {
				message.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("2002GL502", "UPP2002GL502-000263")/*
																														 * @res "、"
																														 */);
				message.append(temp[i]);
			}
			// throw the exception:
			throw new NullFieldException(message.toString());
		}
	}

	public String getOffervoucher() {
		return offervoucher;
	}

	public void setOffervoucher(String offervoucher) {
		this.offervoucher = offervoucher;
	}

	public UFBoolean getIsdifflag() {
		return isdifflag;
	}

	public void setIsdifflag(UFBoolean isdifflag) {
		this.isdifflag = isdifflag;
	}

	public String getErrmessageh() {
		return errmessageh;
	}

	public void setErrmessageh(String errmessageh) {
		this.errmessageh = errmessageh;
	}

	public boolean isHasCashflowModified() {
		return hasCashflowModified;
	}

	public void setHasCashflowModified(boolean hasCashflowModified) {
		this.hasCashflowModified = hasCashflowModified;
	}

	public String getCreator() {
		return creator;
	}

	public void setCreator(String creator) {
		this.creator = creator;
	}

	public UFDateTime getCreationtime() {
		return creationtime;
	}

	public void setCreationtime(UFDateTime creationtime) {
		this.creationtime = creationtime;
	}

	public String getModifier() {
		return modifier;
	}

	public void setModifier(String modifier) {
		this.modifier = modifier;
	}

	public UFDateTime getModifiedtime() {
		return modifiedtime;
	}

	public void setModifiedtime(UFDateTime modifiedtime) {
		this.modifiedtime = modifiedtime;
	}

	public String getPk_group() {
		return pk_group;
	}

	public void setPk_group(String pk_group) {
		this.pk_group = pk_group;
	}

	public String getM_isVerify() {
		return m_isVerify;
	}

	public void setM_isVerify(String verify) {
		m_isVerify = verify;
	}

	public boolean isNoFactorChanged() {
		return isNoFactorChanged;
	}

	public void setNoFactorChanged(boolean isNoFactorChanged) {
		this.isNoFactorChanged = isNoFactorChanged;
	}

	public Object getNoFeature() {
		return noFeature;
	}

	public void setNoFeature(Object noFeature) {
		this.noFeature = noFeature;
	}

	public String getPk_org_v() {
		return pk_org_v;
	}

	public void setPk_org_v(String pkOrgV) {
		pk_org_v = pkOrgV;
	}

	@Override
	public void afterOperationLog(String operateCode) throws BusinessException {
		// BusiLogSmartVO smartlog = new BusiLogSmartVO();
		// smartlog.setTypepk_busiobj(VoucherKey.MD_VOUCHER_ID);
		// smartlog.setBusiobjcode("voucher");
		// smartlog.setBusiobjname("凭证");
		// smartlog.setOperationcode(operateCode);
		// smartlog.setOrgpk_busiobj(getPk_accountingbook());
		// smartlog.setPk_busiobj(getPk_voucher());
		// try {
		// BusiLogServiceUtil.insertSmartBusiLog(smartlog);
		// } catch (Exception e) {
		// Logger.error(e.getMessage(), e);
		// }
	}

	@Override
	public void beforeOperationLog(String operateCode) throws BusinessException {
		// BusiLogSmartVO smartlog = new BusiLogSmartVO();
		// smartlog.setTypepk_busiobj(VoucherKey.MD_VOUCHER_ID);
		// smartlog.setBusiobjcode("voucher");
		// smartlog.setBusiobjname("凭证");
		// smartlog.setOperationcode(operateCode);
		// smartlog.setOrgpk_busiobj(getPk_accountingbook());
		// smartlog.setPk_busiobj(getPk_voucher());
		// try {
		// BusiLogServiceUtil.insertSmartBusiLog(smartlog);
		// } catch (Exception e) {
		// Logger.error(e.getMessage(), e);
		// }

	}

	/**
	 * 新增制单人的getter方法
	 * 
	 * @return
	 */
	public String getBillmaker() {
		return billmaker;
	}

	/**
	 * 新增制单人的setter方法
	 * 
	 * @return
	 */
	public void setBillmaker(String billmaker) {
		this.billmaker = billmaker;
	}

	/**
	 * 新增审核人的getter方法
	 * 
	 * @return
	 */
	public String getApprover() {
		return approver;
	}

	/**
	 * 新增审核人的setter方法
	 * 
	 * @return
	 */
	public void setApprover(String approver) {
		this.approver = approver;
	}

	/**
	 * 属性tempsaveflag的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getTempsaveflag() {
		return m_tempsaveflag;
	}

	/**
	 * 属性tempsaveflag的Setter方法. 创建日期:
	 * 
	 * @param newTempsaveflag
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setTempsaveflag(nc.vo.pub.lang.UFBoolean newTempsaveflag) {
		this.m_tempsaveflag = newTempsaveflag;
		for(DetailVO detail : getDetails()){
			detail.setTempsaveflag(newTempsaveflag);
		}
	}

	/**
	 * 属性totaldebitgroup的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getTotaldebitgroup() {
		return m_totaldebitgroup == null ? UFDouble.ZERO_DBL : m_totaldebitgroup;
	}

	/**
	 * 属性totaldebitgroup的Setter方法. 创建日期:
	 * 
	 * @param newTotaldebitgroup
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setTotaldebitgroup(nc.vo.pub.lang.UFDouble newTotaldebitgroup) {
		this.m_totaldebitgroup = newTotaldebitgroup;
	}

	/**
	 * 属性totalcreditgroup的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getTotalcreditgroup() {
		return m_totalcreditgroup == null ? UFDouble.ZERO_DBL : m_totalcreditgroup;
	}

	/**
	 * 属性totalcreditgroup的Setter方法. 创建日期:
	 * 
	 * @param newTotalcreditgroup
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setTotalcreditgroup(nc.vo.pub.lang.UFDouble newTotalcreditgroup) {
		this.m_totalcreditgroup = newTotalcreditgroup;
	}

	/**
	 * 属性totaldebitglobal的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getTotaldebitglobal() {
		return m_totaldebitglobal == null ? UFDouble.ZERO_DBL : m_totaldebitglobal;
	}

	/**
	 * 属性totaldebitglobal的Setter方法. 创建日期:
	 * 
	 * @param newTotaldebitglobal
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setTotaldebitglobal(nc.vo.pub.lang.UFDouble newTotaldebitglobal) {
		this.m_totaldebitglobal = newTotaldebitglobal;
	}

	/**
	 * 属性totalcreditglobal的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getTotalcreditglobal() {
		return m_totalcreditglobal == null ? UFDouble.ZERO_DBL : m_totalcreditglobal;
	}

	/**
	 * 属性totalcreditglobal的Setter方法. 创建日期:
	 * 
	 * @param newTotalcreditglobal
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setTotalcreditglobal(nc.vo.pub.lang.UFDouble newTotalcreditglobal) {
		this.m_totalcreditglobal = newTotalcreditglobal;
	}

	@Override
	public Object getFipInfo() {
		return this.fipInfo;
	}

	@Override
	public FipRelationInfoVO getFipRelationInfoVO() {
		FipRelationInfoVO returnFipRelationInfoVO = new FipRelationInfoVO();
		// private String pk_group = null;// 集团
		returnFipRelationInfoVO.setPk_group(this.getPk_group());
		// private String pk_org = null;// 组织
		returnFipRelationInfoVO.setPk_org(this.getPk_accountingbook());

		// private String pk_system = null;// 系统类型
		returnFipRelationInfoVO.setPk_system("GL");
        returnFipRelationInfoVO.setPk_billtype("C0");// this.getPk_vouchertype()+this.getNo());//凭证类别+凭证号
		returnFipRelationInfoVO.setRelationID(this.getPk_voucher());
		returnFipRelationInfoVO.setPk_operator(this.getPk_prepared());
		returnFipRelationInfoVO.setFreedef1(getVoucherNoStr(this.getNo()));// 单据号
		// private String freedef2 = null; // 自定义项2
		returnFipRelationInfoVO.setFreedef2(this.getExplanation());// 备注 ----摘要
		// private String freedef3 = null; // 自定义项3
		returnFipRelationInfoVO.setFreedef3("" +(UFDouble.ZERO_DBL.equals(this.getTotaldebit()) ? this.getTotalcredit() : this.getTotaldebit())); // 传递一个金额即可
		returnFipRelationInfoVO.setBusidate(this.getPrepareddate());
		/**
		 * 控制条件
		 */
		return returnFipRelationInfoVO;
	}
	
	private static final int maxLength = 8;
	private String getVoucherNoStr(Integer voucherNo)
	    {
	        StringBuffer rtStr = new StringBuffer();
	        if(voucherNo == null)
	        	voucherNo = 0;
	        String string = voucherNo.toString();
	        for(int i = string.length(); i < maxLength; i++)
	            rtStr.append("0");

	        rtStr.append(string);
	        return rtStr.toString();
	    }
	

	/**
	 * 该信息只是在这里缓存一下 不用关心类型
	 */
	@Override
	public void setFipInfo(Object info) {
		this.fipInfo = info;
	}

	@Override
	public void setControlFlag(String editflag) {
		//如果没有控制规则 则默认全部勾选
		if(StringUtils.isEmpty(editflag)) {
			editflag = VoucherModflagTool.DEFAULT_CTRL.substring(1);
		}
		this.editflag = editflag;
		if (editflag != null && editflag.length() > 4) {
			setModifyflag(editflag.substring(VoucherModflagTool.getControlRuleStrIndex(VoucherKey.V_PREPAREDDATE)-1, VoucherModflagTool.getControlRuleStrIndex(VoucherKey.V_ATTACHMENT)));
			setDetailmodflag(UFBoolean.valueOf(String.valueOf(editflag.charAt(VoucherModflagTool.getControlRuleStrIndex(VoucherKey.V_DETAILMODFLAG)-1))));
			Vector detail2 = getDetail();
			if(detail2 != null && detail2.size()>0) {
				for (Object object : detail2) {
					DetailVO detailVo = (DetailVO) object;
					if (detailVo.getModifyflag() == null) {
					detailVo.setModifyflag(editflag.substring(4));
					}else {
						detailVo.setModifyflag(ModifyFlagConvertTool.detailFlayConvertTo61(detailVo.getModifyflag()));
					}
				}
			}
		}
	}

	public String getEditflag() {
		return editflag;
	}

	public void setPreaccountflag(UFBoolean preaccountflag) {
		this.preaccountflag = preaccountflag;
	}

	public UFBoolean getPreaccountflag() {
		return preaccountflag;
	}

	public void setTs(UFDateTime m_ts) {
		this.m_ts = m_ts;
	}

	public UFDateTime getTs() {
		return m_ts;
	}

	public void setIsOffer(UFBoolean isOffer) {
		this.isOffer = isOffer;
	}

	public UFBoolean getIsOffer() {
		return isOffer;
	}

	public boolean isHasRefVerify() {
		return hasRefVerify;
	}

	public void setHasRefVerify(boolean hasRefVerify) {
		this.hasRefVerify = hasRefVerify;
	}
}